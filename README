# Sorry to say, but you need to Zoom out this page a little bit to read this README.

# vim: ts=2 sw=2 ft=sql et


-----------------------------------------------------------
                                                        
     #                  "                  "         
  mmm#   mmm    m mm   mm     mmm        mmm    mmm  
 #" "#  "   #   #   "   #    #   "         #   #   " 
 #   #  m"""#   #       #     """m         #    """m 
 "#m##  "mm"#   #     mm#mm  "mmm"    #    #   "mmm" 
                                           #         
                                         ""          
-----------------------------------------------------------

Welcome to a Node.js implementation of the DARIS.concept. This project is a proof-of-concept
of DARIS.concept (https://github.com/midnqp/DARIS.concept), demonstrating a set of 
deeply-beneficial design architectures, and a more meaningful opposition to OOP.

This implementation in Node.js may be a stern reply to it being attributed with "callback hell".
So, a fun slogan would be: "callback done right".


Built with dexterity, using:
ALHAMDJS - A Node.js vanilla framework for people who "hate frameworks with a passion". Find 
           your home at `https://github.com/midnqp/DARIS.concept`




_______ GETTING STARTED  _______

[[ STEP 1 ]  SETTING UP MYSQL DATABASE FOR `DARIS.JS`  ]


You need to enable Auth_socket for MySQL to allow connection
to MySQL from Node.js.

After that, execute the following in MySQL shell to setup the DB:

```
create database `daris`;
alter user 'root'@'localhost' \
	identified with mysql_native_password \ 
	by 'Password@2'; #improve security at will !!



use `daris`; create table `daris_ques`
(
    `ques_id` INT NOT NULL auto_increment,
    `ques_user_id` INT NOT NULL,
    `ques_title` VARCHAR(100) NOT NULL,
    `ques_desc` VARCHAR(1500) NOT NULL,
    `ques_up` INT NOT NULL,
    `ques_down` INT NOT NULL,
    `ques_time` DATETIME NOT NULL,
    PRIMARY KEY (`ques_id`)
) ENGINE = MyISAM;

use `daris`; create table `daris_ans`
(
    `ans_id` INT NOT NULL auto_increment,
    `ans_user_id` INT NOT NULL,
    `ans_desc` VARCHAR(1500) NOT NULL,
    `ans_up` INT NOT NULL,
    `ans_down` INT NOT NULL,
    `ans_time` DATETIME NOT NULL,
    PRIMARY KEY (`ans_id`)
) ENGINE = MyISAM;

use `daris`; create table `daris_users`
(
    `user_id` INT NOT NULL auto_increment,
    `asked_ques_id` VARCHAR NOT NULL,
    `answered_ans_id` VARCHAR NOT NULL,
    PRIMARY KEY (`user_id`)
) ENGINE = MyISAM;

```

[[ STEP 2 ] FINALLY, STARTING SERVER ]


Do this once: `npm i package.json`
To start server: `nodemon DarisMainServer.js`


_______ MORE INFO ON THE DATABASE _______

   [tableName].[columnName]      [description]
-- daris_ans.ans_id: 
  ans_id should be: ques_id + underscore + nth-answer,
  like: ans_id = 1234_3, meaning: 3rd answer of ques_id 1234.

-- daris_users`.`asked_ques_id`:
  space-separated ques_id enclosed as a VARCHAR string.




_______ `ALHAMD Dev Environment` (ALDenv) FOR Node.js _______

# [Recommended] vim-airline
# [Strongly Recommended] vim-youcompleteme (requires Vim 8.1.2269+)
# [Strongly Recommended] Enable autocompletion for Node.js syntax & your custom library: 
# `npm i --save-dev @types/node`




_______ CODE STYLE _______

(These are simple rules, so I put them here)

  - When using `require`, do name the variables in CAPS, like:
    `const QS = require('querystring');`
    Otherwise, never use ALL CAPS for variable-naming
    
    Name of modules for rendering to View may have underscore,
    like: in `DarisMainServer.js` View modules are named "DARIS_INDEX",
    "DARIS_QUESTION", "DARIS_ANSWER".

  - We don't have to do OOP stuffs, like having separate files 
    for every single class. We can have long files. 
    Remember: "Do one thing (in a file), do it well." - Unix
    Like: have one single `module/ui_components/index.js` file,
    with the only responsibility to render the homepage. 

  - With due respect, you don't have to make your code look smart.
    Remember: [CONSISTENCY] is greater than [Saving few keystrokes]
    Remember: "There should be (exactly) 1 way to do something - most
    efficiently." - Rob Pike (Golang creator; quote modified)
    Just make sure that, head doesn't start spinning when anyone
    sees your code.

  - Function & variable names shall not be cryptic. Function names 
    shall have "_" (underscore), like: "exec_mysql(sql, callback)", 
    "Display_Hot_Questions()".
    
    Variable names should be like: "IndexHTML", "mysqlCreds". If you
    do need to use abbreviated name, do have comment beside saying the
    elaboration.
